/* automatically generated by rust-bindgen 0.70.1 */

pub const HOOKAPI_INCLUDED: u32 = 1;
pub const KEYLET_HOOK: u32 = 1;
pub const KEYLET_HOOK_STATE: u32 = 2;
pub const KEYLET_ACCOUNT: u32 = 3;
pub const KEYLET_AMENDMENTS: u32 = 4;
pub const KEYLET_CHILD: u32 = 5;
pub const KEYLET_SKIP: u32 = 6;
pub const KEYLET_FEES: u32 = 7;
pub const KEYLET_NEGATIVE_UNL: u32 = 8;
pub const KEYLET_LINE: u32 = 9;
pub const KEYLET_OFFER: u32 = 10;
pub const KEYLET_QUALITY: u32 = 11;
pub const KEYLET_EMITTED_DIR: u32 = 12;
pub const KEYLET_TICKET: u32 = 13;
pub const KEYLET_SIGNERS: u32 = 14;
pub const KEYLET_CHECK: u32 = 15;
pub const KEYLET_DEPOSIT_PREAUTH: u32 = 16;
pub const KEYLET_UNCHECKED: u32 = 17;
pub const KEYLET_OWNER_DIR: u32 = 18;
pub const KEYLET_PAGE: u32 = 19;
pub const KEYLET_ESCROW: u32 = 20;
pub const KEYLET_PAYCHAN: u32 = 21;
pub const KEYLET_EMITTED: u32 = 22;
pub const KEYLET_NFT_OFFER: u32 = 23;
pub const KEYLET_HOOK_DEFINITION: u32 = 24;
pub const KEYLET_HOOK_STATE_DIR: u32 = 25;
pub const COMPARE_EQUAL: u32 = 1;
pub const COMPARE_LESS: u32 = 2;
pub const COMPARE_GREATER: u32 = 4;
pub const SUCCESS: u32 = 0;
pub const OUT_OF_BOUNDS: i32 = -1;
pub const INTERNAL_ERROR: i32 = -2;
pub const TOO_BIG: i32 = -3;
pub const TOO_SMALL: i32 = -4;
pub const DOESNT_EXIST: i32 = -5;
pub const NO_FREE_SLOTS: i32 = -6;
pub const INVALID_ARGUMENT: i32 = -7;
pub const ALREADY_SET: i32 = -8;
pub const PREREQUISITE_NOT_MET: i32 = -9;
pub const FEE_TOO_LARGE: i32 = -10;
pub const EMISSION_FAILURE: i32 = -11;
pub const TOO_MANY_NONCES: i32 = -12;
pub const TOO_MANY_EMITTED_TXN: i32 = -13;
pub const NOT_IMPLEMENTED: i32 = -14;
pub const INVALID_ACCOUNT: i32 = -15;
pub const GUARD_VIOLATION: i32 = -16;
pub const INVALID_FIELD: i32 = -17;
pub const PARSE_ERROR: i32 = -18;
pub const RC_ROLLBACK: i32 = -19;
pub const RC_ACCEPT: i32 = -20;
pub const NO_SUCH_KEYLET: i32 = -21;
pub const NOT_AN_ARRAY: i32 = -22;
pub const NOT_AN_OBJECT: i32 = -23;
pub const INVALID_FLOAT: i32 = -10024;
pub const DIVISION_BY_ZERO: i32 = -25;
pub const MANTISSA_OVERSIZED: i32 = -26;
pub const MANTISSA_UNDERSIZED: i32 = -27;
pub const EXPONENT_OVERSIZED: i32 = -28;
pub const EXPONENT_UNDERSIZED: i32 = -29;
pub const XFL_OVERFLOW: i32 = -30;
pub const NOT_IOU_AMOUNT: i32 = -31;
pub const NOT_AN_AMOUNT: i32 = -32;
pub const CANT_RETURN_NEGATIVE: i32 = -33;
pub const NOT_AUTHORIZED: i32 = -34;
pub const PREVIOUS_FAILURE_PREVENTS_RETRY: i32 = -35;
pub const TOO_MANY_PARAMS: i32 = -36;
pub const INVALID_TXN: i32 = -37;
pub const RESERVE_INSUFFICIENT: i32 = -38;
pub const COMPLEX_NOT_SUPPORTED: i32 = -39;
pub const DOES_NOT_MATCH: i32 = -40;
pub const INVALID_KEY: i32 = -41;
pub const NOT_A_STRING: i32 = -42;
pub const MEM_OVERLAP: i32 = -43;
pub const TOO_MANY_STATE_MODIFICATIONS: i32 = -44;
pub const TOO_MANY_NAMESPACES: i32 = -45;
pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const sfCloseResolution: u32 = 1048577;
pub const sfMethod: u32 = 1048578;
pub const sfTransactionResult: u32 = 1048579;
pub const sfTickSize: u32 = 1048592;
pub const sfUNLModifyDisabling: u32 = 1048593;
pub const sfHookResult: u32 = 1048594;
pub const sfLedgerEntryType: u32 = 65537;
pub const sfTransactionType: u32 = 65538;
pub const sfSignerWeight: u32 = 65539;
pub const sfTransferFee: u32 = 65540;
pub const sfVersion: u32 = 65552;
pub const sfHookStateChangeCount: u32 = 65553;
pub const sfHookEmitCount: u32 = 65554;
pub const sfHookExecutionIndex: u32 = 65555;
pub const sfHookApiVersion: u32 = 65556;
pub const sfNetworkID: u32 = 131073;
pub const sfFlags: u32 = 131074;
pub const sfSourceTag: u32 = 131075;
pub const sfSequence: u32 = 131076;
pub const sfPreviousTxnLgrSeq: u32 = 131077;
pub const sfLedgerSequence: u32 = 131078;
pub const sfCloseTime: u32 = 131079;
pub const sfParentCloseTime: u32 = 131080;
pub const sfSigningTime: u32 = 131081;
pub const sfExpiration: u32 = 131082;
pub const sfTransferRate: u32 = 131083;
pub const sfWalletSize: u32 = 131084;
pub const sfOwnerCount: u32 = 131085;
pub const sfDestinationTag: u32 = 131086;
pub const sfHighQualityIn: u32 = 131088;
pub const sfHighQualityOut: u32 = 131089;
pub const sfLowQualityIn: u32 = 131090;
pub const sfLowQualityOut: u32 = 131091;
pub const sfQualityIn: u32 = 131092;
pub const sfQualityOut: u32 = 131093;
pub const sfStampEscrow: u32 = 131094;
pub const sfBondAmount: u32 = 131095;
pub const sfLoadFee: u32 = 131096;
pub const sfOfferSequence: u32 = 131097;
pub const sfFirstLedgerSequence: u32 = 131098;
pub const sfLastLedgerSequence: u32 = 131099;
pub const sfTransactionIndex: u32 = 131100;
pub const sfOperationLimit: u32 = 131101;
pub const sfReferenceFeeUnits: u32 = 131102;
pub const sfReserveBase: u32 = 131103;
pub const sfReserveIncrement: u32 = 131104;
pub const sfSetFlag: u32 = 131105;
pub const sfClearFlag: u32 = 131106;
pub const sfSignerQuorum: u32 = 131107;
pub const sfCancelAfter: u32 = 131108;
pub const sfFinishAfter: u32 = 131109;
pub const sfSignerListID: u32 = 131110;
pub const sfSettleDelay: u32 = 131111;
pub const sfTicketCount: u32 = 131112;
pub const sfTicketSequence: u32 = 131113;
pub const sfNFTokenTaxon: u32 = 131114;
pub const sfMintedNFTokens: u32 = 131115;
pub const sfBurnedNFTokens: u32 = 131116;
pub const sfHookStateCount: u32 = 131117;
pub const sfEmitGeneration: u32 = 131118;
pub const sfLockCount: u32 = 131121;
pub const sfFirstNFTokenSequence: u32 = 131122;
pub const sfXahauActivationLgrSeq: u32 = 131168;
pub const sfImportSequence: u32 = 131169;
pub const sfRewardTime: u32 = 131170;
pub const sfRewardLgrFirst: u32 = 131171;
pub const sfRewardLgrLast: u32 = 131172;
pub const sfIndexNext: u32 = 196609;
pub const sfIndexPrevious: u32 = 196610;
pub const sfBookNode: u32 = 196611;
pub const sfOwnerNode: u32 = 196612;
pub const sfBaseFee: u32 = 196613;
pub const sfExchangeRate: u32 = 196614;
pub const sfLowNode: u32 = 196615;
pub const sfHighNode: u32 = 196616;
pub const sfDestinationNode: u32 = 196617;
pub const sfCookie: u32 = 196618;
pub const sfServerVersion: u32 = 196619;
pub const sfNFTokenOfferNode: u32 = 196620;
pub const sfEmitBurden: u32 = 196621;
pub const sfHookInstructionCount: u32 = 196625;
pub const sfHookReturnCode: u32 = 196626;
pub const sfReferenceCount: u32 = 196627;
pub const sfAccountIndex: u32 = 196706;
pub const sfAccountCount: u32 = 196707;
pub const sfRewardAccumulator: u32 = 196708;
pub const sfEmailHash: u32 = 262145;
pub const sfTakerPaysCurrency: u32 = 655361;
pub const sfTakerPaysIssuer: u32 = 655362;
pub const sfTakerGetsCurrency: u32 = 655363;
pub const sfTakerGetsIssuer: u32 = 655364;
pub const sfLedgerHash: u32 = 327681;
pub const sfParentHash: u32 = 327682;
pub const sfTransactionHash: u32 = 327683;
pub const sfAccountHash: u32 = 327684;
pub const sfPreviousTxnID: u32 = 327685;
pub const sfLedgerIndex: u32 = 327686;
pub const sfWalletLocator: u32 = 327687;
pub const sfRootIndex: u32 = 327688;
pub const sfAccountTxnID: u32 = 327689;
pub const sfNFTokenID: u32 = 327690;
pub const sfEmitParentTxnID: u32 = 327691;
pub const sfEmitNonce: u32 = 327692;
pub const sfEmitHookHash: u32 = 327693;
pub const sfBookDirectory: u32 = 327696;
pub const sfInvoiceID: u32 = 327697;
pub const sfNickname: u32 = 327698;
pub const sfAmendment: u32 = 327699;
pub const sfHookOn: u32 = 327700;
pub const sfDigest: u32 = 327701;
pub const sfChannel: u32 = 327702;
pub const sfConsensusHash: u32 = 327703;
pub const sfCheckID: u32 = 327704;
pub const sfValidatedHash: u32 = 327705;
pub const sfPreviousPageMin: u32 = 327706;
pub const sfNextPageMin: u32 = 327707;
pub const sfNFTokenBuyOffer: u32 = 327708;
pub const sfNFTokenSellOffer: u32 = 327709;
pub const sfHookStateKey: u32 = 327710;
pub const sfHookHash: u32 = 327711;
pub const sfHookNamespace: u32 = 327712;
pub const sfHookSetTxnID: u32 = 327713;
pub const sfOfferID: u32 = 327714;
pub const sfEscrowID: u32 = 327715;
pub const sfURITokenID: u32 = 327716;
pub const sfGovernanceFlags: u32 = 327779;
pub const sfGovernanceMarks: u32 = 327778;
pub const sfEmittedTxnID: u32 = 327777;
pub const sfAmount: u32 = 393217;
pub const sfBalance: u32 = 393218;
pub const sfLimitAmount: u32 = 393219;
pub const sfTakerPays: u32 = 393220;
pub const sfTakerGets: u32 = 393221;
pub const sfLowLimit: u32 = 393222;
pub const sfHighLimit: u32 = 393223;
pub const sfFee: u32 = 393224;
pub const sfSendMax: u32 = 393225;
pub const sfDeliverMin: u32 = 393226;
pub const sfMinimumOffer: u32 = 393232;
pub const sfRippleEscrow: u32 = 393233;
pub const sfDeliveredAmount: u32 = 393234;
pub const sfNFTokenBrokerFee: u32 = 393235;
pub const sfHookCallbackFee: u32 = 393236;
pub const sfLockedBalance: u32 = 393237;
pub const sfBaseFeeDrops: u32 = 393238;
pub const sfReserveBaseDrops: u32 = 393239;
pub const sfReserveIncrementDrops: u32 = 393240;
pub const sfPublicKey: u32 = 458753;
pub const sfMessageKey: u32 = 458754;
pub const sfSigningPubKey: u32 = 458755;
pub const sfTxnSignature: u32 = 458756;
pub const sfURI: u32 = 458757;
pub const sfSignature: u32 = 458758;
pub const sfDomain: u32 = 458759;
pub const sfFundCode: u32 = 458760;
pub const sfRemoveCode: u32 = 458761;
pub const sfExpireCode: u32 = 458762;
pub const sfCreateCode: u32 = 458763;
pub const sfMemoType: u32 = 458764;
pub const sfMemoData: u32 = 458765;
pub const sfMemoFormat: u32 = 458766;
pub const sfFulfillment: u32 = 458768;
pub const sfCondition: u32 = 458769;
pub const sfMasterSignature: u32 = 458770;
pub const sfUNLModifyValidator: u32 = 458771;
pub const sfValidatorToDisable: u32 = 458772;
pub const sfValidatorToReEnable: u32 = 458773;
pub const sfHookStateData: u32 = 458774;
pub const sfHookReturnString: u32 = 458775;
pub const sfHookParameterName: u32 = 458776;
pub const sfHookParameterValue: u32 = 458777;
pub const sfBlob: u32 = 458778;
pub const sfAccount: u32 = 524289;
pub const sfOwner: u32 = 524290;
pub const sfDestination: u32 = 524291;
pub const sfIssuer: u32 = 524292;
pub const sfAuthorize: u32 = 524293;
pub const sfUnauthorize: u32 = 524294;
pub const sfRegularKey: u32 = 524296;
pub const sfNFTokenMinter: u32 = 524297;
pub const sfEmitCallback: u32 = 524298;
pub const sfHookAccount: u32 = 524304;
pub const sfInform: u32 = 524387;
pub const sfIndexes: u32 = 1245185;
pub const sfHashes: u32 = 1245186;
pub const sfAmendments: u32 = 1245187;
pub const sfNFTokenOffers: u32 = 1245188;
pub const sfHookNamespaces: u32 = 1245189;
pub const sfURITokenIDs: u32 = 1245283;
pub const sfPaths: u32 = 1179649;
pub const sfTransactionMetaData: u32 = 917506;
pub const sfCreatedNode: u32 = 917507;
pub const sfDeletedNode: u32 = 917508;
pub const sfModifiedNode: u32 = 917509;
pub const sfPreviousFields: u32 = 917510;
pub const sfFinalFields: u32 = 917511;
pub const sfNewFields: u32 = 917512;
pub const sfTemplateEntry: u32 = 917513;
pub const sfMemo: u32 = 917514;
pub const sfSignerEntry: u32 = 917515;
pub const sfNFToken: u32 = 917516;
pub const sfEmitDetails: u32 = 917517;
pub const sfHook: u32 = 917518;
pub const sfSigner: u32 = 917520;
pub const sfMajority: u32 = 917522;
pub const sfDisabledValidator: u32 = 917523;
pub const sfEmittedTxn: u32 = 917524;
pub const sfHookExecution: u32 = 917525;
pub const sfHookDefinition: u32 = 917526;
pub const sfHookParameter: u32 = 917527;
pub const sfHookGrant: u32 = 917528;
pub const sfGenesisMint: u32 = 917600;
pub const sfActiveValidator: u32 = 917599;
pub const sfImportVLKey: u32 = 917598;
pub const sfHookEmission: u32 = 917597;
pub const sfMintURIToken: u32 = 917596;
pub const sfAmountEntry: u32 = 917595;
pub const sfSigners: u32 = 983043;
pub const sfSignerEntries: u32 = 983044;
pub const sfTemplate: u32 = 983045;
pub const sfNecessary: u32 = 983046;
pub const sfSufficient: u32 = 983047;
pub const sfAffectedNodes: u32 = 983048;
pub const sfMemos: u32 = 983049;
pub const sfNFTokens: u32 = 983050;
pub const sfHooks: u32 = 983051;
pub const sfMajorities: u32 = 983056;
pub const sfDisabledValidators: u32 = 983057;
pub const sfHookExecutions: u32 = 983058;
pub const sfHookParameters: u32 = 983059;
pub const sfHookGrants: u32 = 983060;
pub const sfGenesisMints: u32 = 983136;
pub const sfActiveValidators: u32 = 983135;
pub const sfImportVLKeys: u32 = 983134;
pub const sfHookEmissions: u32 = 983133;
pub const sfAmounts: u32 = 983132;
pub const HOOKMACROS_INCLUDED: u32 = 1;
pub const DEBUG: u32 = 1;
pub const tfCANONICAL: u32 = 2147483648;
pub const atACCOUNT: u32 = 1;
pub const atOWNER: u32 = 2;
pub const atDESTINATION: u32 = 3;
pub const atISSUER: u32 = 4;
pub const atAUTHORIZE: u32 = 5;
pub const atUNAUTHORIZE: u32 = 6;
pub const atTARGET: u32 = 7;
pub const atREGULARKEY: u32 = 8;
pub const atPSEUDOCALLBACK: u32 = 9;
pub const amAMOUNT: u32 = 1;
pub const amBALANCE: u32 = 2;
pub const amLIMITAMOUNT: u32 = 3;
pub const amTAKERPAYS: u32 = 4;
pub const amTAKERGETS: u32 = 5;
pub const amLOWLIMIT: u32 = 6;
pub const amHIGHLIMIT: u32 = 7;
pub const amFEE: u32 = 8;
pub const amSENDMAX: u32 = 9;
pub const amDELIVERMIN: u32 = 10;
pub const amMINIMUMOFFER: u32 = 16;
pub const amRIPPLEESCROW: u32 = 17;
pub const amDELIVEREDAMOUNT: u32 = 18;
pub const ttPAYMENT: u32 = 0;
pub const ttESCROW_CREATE: u32 = 1;
pub const ttESCROW_FINISH: u32 = 2;
pub const ttACCOUNT_SET: u32 = 3;
pub const ttESCROW_CANCEL: u32 = 4;
pub const ttREGULAR_KEY_SET: u32 = 5;
pub const ttOFFER_CREATE: u32 = 7;
pub const ttOFFER_CANCEL: u32 = 8;
pub const ttTICKET_CREATE: u32 = 10;
pub const ttSIGNER_LIST_SET: u32 = 12;
pub const ttPAYCHAN_CREATE: u32 = 13;
pub const ttPAYCHAN_FUND: u32 = 14;
pub const ttPAYCHAN_CLAIM: u32 = 15;
pub const ttCHECK_CREATE: u32 = 16;
pub const ttCHECK_CASH: u32 = 17;
pub const ttCHECK_CANCEL: u32 = 18;
pub const ttDEPOSIT_PREAUTH: u32 = 19;
pub const ttTRUST_SET: u32 = 20;
pub const ttACCOUNT_DELETE: u32 = 21;
pub const ttHOOK_SET: u32 = 22;
pub const ttNFTOKEN_MINT: u32 = 25;
pub const ttNFTOKEN_BURN: u32 = 26;
pub const ttNFTOKEN_CREATE_OFFER: u32 = 27;
pub const ttNFTOKEN_CANCEL_OFFER: u32 = 28;
pub const ttNFTOKEN_ACCEPT_OFFER: u32 = 29;
pub const ttURITOKEN_MINT: u32 = 45;
pub const ttURITOKEN_BURN: u32 = 46;
pub const ttURITOKEN_BUY: u32 = 47;
pub const ttURITOKEN_CREATE_SELL_OFFER: u32 = 48;
pub const ttURITOKEN_CANCEL_SELL_OFFER: u32 = 49;
pub const ttREMIT: u32 = 95;
pub const ttGENESIS_MINT: u32 = 96;
pub const ttIMPORT: u32 = 97;
pub const ttCLAIM_REWARD: u32 = 98;
pub const ttINVOKE: u32 = 99;
pub const ttAMENDMENT: u32 = 100;
pub const ttFEE: u32 = 101;
pub const ttUNL_MODIFY: u32 = 102;
pub const ttEMIT_FAILURE: u32 = 103;
pub const ttUNL_REPORT: u32 = 104;
extern "C" {
    pub fn _g(guard_id: u32, maxiter: u32) -> i32;
}
extern "C" {
    pub fn accept(read_ptr: u32, read_len: u32, error_code: i64) -> i64;
}
extern "C" {
    pub fn rollback(read_ptr: u32, read_len: u32, error_code: i64) -> i64;
}
extern "C" {
    pub fn util_raddr(write_ptr: u32, write_len: u32, read_ptr: u32, read_len: u32) -> i64;
}
extern "C" {
    pub fn util_accid(write_ptr: u32, write_len: u32, read_ptr: u32, read_len: u32) -> i64;
}
extern "C" {
    pub fn util_verify(
        dread_ptr: u32,
        dread_len: u32,
        sread_ptr: u32,
        sread_len: u32,
        kread_ptr: u32,
        kread_len: u32,
    ) -> i64;
}
extern "C" {
    pub fn util_sha512h(write_ptr: u32, write_len: u32, read_ptr: u32, read_len: u32) -> i64;
}
extern "C" {
    pub fn util_keylet(
        write_ptr: u32,
        write_len: u32,
        keylet_type: u32,
        a: u32,
        b: u32,
        c: u32,
        d: u32,
        e: u32,
        f: u32,
    ) -> i64;
}
extern "C" {
    pub fn sto_validate(tread_ptr: u32, tread_len: u32) -> i64;
}
extern "C" {
    pub fn sto_subfield(read_ptr: u32, read_len: u32, field_id: u32) -> i64;
}
extern "C" {
    pub fn sto_subarray(read_ptr: u32, read_len: u32, array_id: u32) -> i64;
}
extern "C" {
    pub fn sto_emplace(
        write_ptr: u32,
        write_len: u32,
        sread_ptr: u32,
        sread_len: u32,
        fread_ptr: u32,
        fread_len: u32,
        field_id: u32,
    ) -> i64;
}
extern "C" {
    pub fn sto_erase(
        write_ptr: u32,
        write_len: u32,
        read_ptr: u32,
        read_len: u32,
        field_id: u32,
    ) -> i64;
}
extern "C" {
    pub fn etxn_burden() -> i64;
}
extern "C" {
    pub fn etxn_details(write_ptr: u32, write_len: u32) -> i64;
}
extern "C" {
    pub fn etxn_fee_base(read_ptr: u32, read_len: u32) -> i64;
}
extern "C" {
    pub fn etxn_reserve(count: u32) -> i64;
}
extern "C" {
    pub fn etxn_generation() -> i64;
}
extern "C" {
    pub fn etxn_nonce(write_ptr: u32, write_len: u32) -> i64;
}
extern "C" {
    pub fn emit(write_ptr: u32, write_len: u32, read_ptr: u32, read_len: u32) -> i64;
}
extern "C" {
    pub fn float_set(exponent: i32, mantissa: i64) -> i64;
}
extern "C" {
    pub fn float_multiply(float1: i64, float2: i64) -> i64;
}
extern "C" {
    pub fn float_mulratio(float1: i64, round_up: u32, numerator: u32, denominator: u32) -> i64;
}
extern "C" {
    pub fn float_negate(float1: i64) -> i64;
}
extern "C" {
    pub fn float_compare(float1: i64, float2: i64, mode: u32) -> i64;
}
extern "C" {
    pub fn float_sum(float1: i64, float2: i64) -> i64;
}
extern "C" {
    pub fn float_sto(
        write_ptr: u32,
        write_len: u32,
        cread_ptr: u32,
        cread_len: u32,
        iread_ptr: u32,
        iread_len: u32,
        float1: i64,
        field_code: u32,
    ) -> i64;
}
extern "C" {
    pub fn float_sto_set(read_ptr: u32, read_len: u32) -> i64;
}
extern "C" {
    pub fn float_invert(float1: i64) -> i64;
}
extern "C" {
    pub fn float_divide(float1: i64, float2: i64) -> i64;
}
extern "C" {
    pub fn float_one() -> i64;
}
extern "C" {
    pub fn float_mantissa(float1: i64) -> i64;
}
extern "C" {
    pub fn float_sign(float1: i64) -> i64;
}
extern "C" {
    pub fn float_int(float1: i64, decimal_places: u32, abs: u32) -> i64;
}
extern "C" {
    pub fn float_log(float1: i64) -> i64;
}
extern "C" {
    pub fn float_root(float1: i64, n: u32) -> i64;
}
extern "C" {
    pub fn fee_base() -> i64;
}
extern "C" {
    pub fn ledger_seq() -> i64;
}
extern "C" {
    pub fn ledger_last_time() -> i64;
}
extern "C" {
    pub fn ledger_last_hash(write_ptr: u32, write_len: u32) -> i64;
}
extern "C" {
    pub fn ledger_nonce(write_ptr: u32, write_len: u32) -> i64;
}
extern "C" {
    pub fn ledger_keylet(
        write_ptr: u32,
        write_len: u32,
        lread_ptr: u32,
        lread_len: u32,
        hread_ptr: u32,
        hread_len: u32,
    ) -> i64;
}
extern "C" {
    pub fn hook_account(write_ptr: u32, write_len: u32) -> i64;
}
extern "C" {
    pub fn hook_hash(write_ptr: u32, write_len: u32, hook_no: i32) -> i64;
}
extern "C" {
    pub fn hook_param_set(
        read_ptr: u32,
        read_len: u32,
        kread_ptr: u32,
        kread_len: u32,
        hread_ptr: u32,
        hread_len: u32,
    ) -> i64;
}
extern "C" {
    pub fn hook_param(write_ptr: u32, write_len: u32, read_ptr: u32, read_len: u32) -> i64;
}
extern "C" {
    pub fn hook_again() -> i64;
}
extern "C" {
    pub fn hook_skip(read_ptr: u32, read_len: u32, flags: u32) -> i64;
}
extern "C" {
    pub fn hook_pos() -> i64;
}
extern "C" {
    pub fn slot(write_ptr: u32, write_len: u32, slot: u32) -> i64;
}
extern "C" {
    pub fn slot_clear(slot: u32) -> i64;
}
extern "C" {
    pub fn slot_count(slot: u32) -> i64;
}
extern "C" {
    pub fn slot_set(read_ptr: u32, read_len: u32, slot: u32) -> i64;
}
extern "C" {
    pub fn slot_size(slot: u32) -> i64;
}
extern "C" {
    pub fn slot_subarray(parent_slot: u32, array_id: u32, new_slot: u32) -> i64;
}
extern "C" {
    pub fn slot_subfield(parent_slot: u32, field_id: u32, new_slot: u32) -> i64;
}
extern "C" {
    pub fn slot_type(slot_no: u32, flags: u32) -> i64;
}
extern "C" {
    pub fn slot_float(slot_no: u32) -> i64;
}
extern "C" {
    pub fn state_set(read_ptr: u32, read_len: u32, kread_ptr: u32, kread_len: u32) -> i64;
}
extern "C" {
    pub fn state_foreign_set(
        read_ptr: u32,
        read_len: u32,
        kread_ptr: u32,
        kread_len: u32,
        nread_ptr: u32,
        nread_len: u32,
        aread_ptr: u32,
        aread_len: u32,
    ) -> i64;
}
extern "C" {
    pub fn state(write_ptr: u32, write_len: u32, kread_ptr: u32, kread_len: u32) -> i64;
}
extern "C" {
    pub fn state_foreign(
        write_ptr: u32,
        write_len: u32,
        kread_ptr: u32,
        kread_len: u32,
        nread_ptr: u32,
        nread_len: u32,
        aread_ptr: u32,
        aread_len: u32,
    ) -> i64;
}
extern "C" {
    pub fn trace(
        mread_ptr: u32,
        mread_len: u32,
        dread_ptr: u32,
        dread_len: u32,
        as_hex: u32,
    ) -> i64;
}
extern "C" {
    pub fn trace_num(read_ptr: u32, read_len: u32, number: i64) -> i64;
}
extern "C" {
    pub fn trace_float(read_ptr: u32, read_len: u32, float1: i64) -> i64;
}
extern "C" {
    pub fn otxn_burden() -> i64;
}
extern "C" {
    pub fn otxn_field(write_ptr: u32, write_len: u32, field_id: u32) -> i64;
}
extern "C" {
    pub fn otxn_generation() -> i64;
}
extern "C" {
    pub fn otxn_id(write_ptr: u32, write_len: u32, flags: u32) -> i64;
}
extern "C" {
    pub fn otxn_type() -> i64;
}
extern "C" {
    pub fn otxn_slot(slot_no: u32) -> i64;
}
extern "C" {
    pub fn otxn_param(write_ptr: u32, write_len: u32, read_ptr: u32, read_len: u32) -> i64;
}
extern "C" {
    pub fn meta_slot(slot_no: u32) -> i64;
}
extern "C" {
    pub fn xpop_slot(arg1: u32, arg2: u32) -> i64;
}
